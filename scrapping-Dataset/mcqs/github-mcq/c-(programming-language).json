[
    {
        "question": "Which Code sample will eventually cause the computer to run out of memory?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "What will be the output of the code below?",
        "options": [
            ":",
            ":",
            ":",
            "Nothing is printed on Screen"
        ],
        "answer": ":"
    },
    {
        "question": "What is the name for calling a function inside the same function?",
        "options": [
            "recursion",
            "subfunction",
            "inner call",
            "infinite loop"
        ],
        "answer": "recursion"
    },
    {
        "question": "What does the declaration of variable c2 demonstrate?",
        "options": [
            "character arithmetic",
            "undefined assignment",
            "type conversion",
            "invalid declaration"
        ],
        "answer": "character arithmetic"
    },
    {
        "question": "What is this declaration an example of?",
        "options": [
            "a node",
            "a linked list",
            "a stack",
            "a binary tree"
        ],
        "answer": "a node"
    },
    {
        "question": "Header files are listed using the preprocessing directive #include, and can have one of the following formats: #include &lt;fileA&gt; or #include \"fileB\". What is the difference between these two formats?",
        "options": [
            "The preprocessor will try to locate fileA in the same directory as the source file, and the fileB in a predetermined directory path.",
            "The preprocessor will try to locate fileA in the fixed system directory. It will try to locate fileB in the directory path designated by the -I option added to the command line while compiling the source code.",
            "The file using the fileA syntax must be system files, of unlimited number; fileB must be a user file at a maximum of one per source file.",
            "The preprocessor will try to locate fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path."
        ],
        "answer": "The preprocessor will try to locate fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path."
    },
    {
        "question": "Using a for loop, how could you write a C code to count down from 10 to 1 and display each number on its own line?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "What is not one of the reserved words in standard C?",
        "options": [
            "volatile",
            "typeof",
            "register",
            "typedef"
        ],
        "answer": "typeof"
    },
    {
        "question": "What does the program shown below return?",
        "options": [
            "1",
            "3",
            "2",
            "0"
        ],
        "answer": "1"
    },
    {
        "question": "Using the Union declaration below, how many bytes of memory space will the data of this type occupy?",
        "options": [
            "32",
            "54",
            "30",
            "52"
        ],
        "answer": "30"
    },
    {
        "question": "In this code sample, what is not a problem for C compiler?",
        "options": [
            "The value of PI needs to be set to 3.141593, not 3.14",
            "The declaration of PI needs to say const, not constant.",
            "The data type of PI needs to be float, not int.",
            "The printf statement needs to use PI, not pi."
        ],
        "answer": "The value of PI needs to be set to 3.141593, not 3.14"
    },
    {
        "question": "Which is the smallest program to compile and run without errors?",
        "options": [
            "main()",
            "int main() {return 0;}",
            "main() { }",
            "main() { ; }"
        ],
        "answer": "int main() {return 0;}"
    },
    {
        "question": "What is optional in a function declaration?",
        "options": [
            "data type of parameters",
            "return type of function",
            "parameter names",
            "number of parameters"
        ],
        "answer": "parameter names"
    },
    {
        "question": "C treats all devices, such as the display and the keyboard, as files. Which file opens automatically when a program executes?",
        "options": [
            "stdout",
            "stdio.h",
            "default.h",
            "string.h"
        ],
        "answer": "stdout"
    },
    {
        "question": "In which segment does dynamic memory allocation take place?",
        "options": [
            "BSS Segment",
            "stack",
            "heap",
            "data segment"
        ],
        "answer": "heap"
    },
    {
        "question": "Which function do you use to deallocate memory?",
        "options": [
            "dalloc()",
            "dealloc()",
            "release()",
            "free()"
        ],
        "answer": "free()"
    },
    {
        "question": "In C language what are the basic building blocks that are constructed together to write a program?",
        "options": [
            "keywords",
            "identifiers",
            "tokens",
            "functions"
        ],
        "answer": "tokens"
    },
    {
        "question": "When is memory for a variable allocated?",
        "options": [
            "during the assignment of the variable",
            "during the initialization of the variable",
            "during the declaration of the variable",
            "during the definition of the variable"
        ],
        "answer": "during the declaration of the variable"
    },
    {
        "question": "C uses the call by value method to pass arguments to functions. How can you invoke the call by reference method?",
        "options": [
            "by using pointers",
            "by declaring functions separately from defining them",
            "by using recursive functions",
            "by using global variables"
        ],
        "answer": "by using pointers"
    },
    {
        "question": "A union allows you to store different `___` in the same `___`.",
        "options": [
            "Objects; Structure",
            "Variables; Declaration",
            "Data types; Memory space",
            "Arrays; Header file"
        ],
        "answer": "Data types; Memory space"
    },
    {
        "question": "What is the output of this program?",
        "options": [
            "32",
            "Runtime error",
            "-32",
            "0"
        ],
        "answer": "-32"
    },
    {
        "question": "What is the difference between scanf() and sscanf() functions?",
        "options": [
            "The scanf() function reads data formatted as a string; The sscanf() function reads string input from the screen.",
            "The scanf() function reads formatted data from the keyboard; The sscanf() function reads formatted input from a string.",
            "The scanf() function reads string data from the keyboard; The sscanf() function reads string data from a string.",
            "The scanf() function reads formatted data from a file; The sscanf() function reads input from a selected string"
        ],
        "answer": "The scanf() function reads formatted data from the keyboard; The sscanf() function reads formatted input from a string."
    },
    {
        "question": "What is not a valid command with this declaration?",
        "options": [
            "`printf(\"%c\", string[1][2]);`",
            "`printf(\"%s\", string[1][2]);`",
            "`printf(\"%s\", string[1]);`",
            "`printf(string[1]);`"
        ],
        "answer": "`printf(\"%s\", string[1][2]);`"
    },
    {
        "question": "What is the expression player->name equivalent to?",
        "options": [
            "`player.name`",
            "`(*player).name`",
            "`*player.name`",
            "`player.*name`"
        ],
        "answer": "`(*player).name`"
    },
    {
        "question": "Which program will compile and run without errors?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "What does this function call return?",
        "options": [
            "2",
            "2.000000",
            "a runtime error",
            "a compiler error"
        ],
        "answer": "a compiler error"
    },
    {
        "question": "What does this program create?",
        "options": [
            "a runtime error",
            "a NULL pointer",
            "a compile error",
            "a void pointer"
        ],
        "answer": "a NULL pointer"
    },
    {
        "question": "What is an alternative way to write the expression (\\*x).y?",
        "options": [
            "There is no equivalent.",
            "x->y",
            "\\*x->y",
            "y->x"
        ],
        "answer": "x->y"
    },
    {
        "question": "Compile time errors are static errors that can be found in the code.",
        "options": [
            "in declarations and definitions",
            "in functions and expressions",
            "in syntax and semantics",
            "in objects and statements"
        ],
        "answer": "in declarations and definitions"
    },
    {
        "question": "File input and output (I/O) in C is heavily based on the way it is done `___`?",
        "options": [
            "in Unix",
            "in C++",
            "in C#",
            "in DOS"
        ],
        "answer": "in Unix"
    },
    {
        "question": "What does the strcmp(str1, str2); function return?",
        "options": [
            "0 if str1 and str2 are the same, a negative number if str1 is less than str2, a positive number if str1 is greater than str2",
            "true (1) if str1 and str2 are the same, false (0) if str1 and str2 are not the same",
            "true (1) if str1 and str2 are the same, NULL if str1 and str2 are not the same",
            "0 if str1 and str2 are the same, a negative number if str2 is less than str1, a positive number if str2 is greater than str1"
        ],
        "answer": "0 if str1 and str2 are the same, a negative number if str1 is less than str2, a positive number if str1 is greater than str2"
    },
    {
        "question": "What is the output of this program?",
        "options": [
            "100",
            "200",
            "5",
            "50"
        ],
        "answer": "100"
    },
    {
        "question": "Which is _not_ a correct way to declare a string variable?",
        "options": [
            "`char *string = \"Hello World\";`",
            "`char string = \"Hello World\";`",
            "`char string[20] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'};`",
            "`char string[] = \"Hello World\";`"
        ],
        "answer": "`char string = \"Hello World\";`"
    },
    {
        "question": "Which choice is an include guard for the header file mylib.h?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "How many times does the code inside the while loop get executed in this program?",
        "options": [
            "100",
            "3",
            "5",
            "50"
        ],
        "answer": "3"
    },
    {
        "question": "File input and output (I/O) in C is done through what?",
        "options": [
            "syntax-driven components",
            "native interfaces",
            "system objects",
            "function calls"
        ],
        "answer": "function calls"
    },
    {
        "question": "Directives are translated by the?",
        "options": [
            "Pre-processor",
            "Compiler",
            "Linker",
            "Editor"
        ],
        "answer": "Pre-processor"
    },
    {
        "question": "The main loop structures in C programming are the for loop, the while loop, and which other loop?",
        "options": [
            "do...while",
            "for...in",
            "repeat...until",
            "do...until"
        ],
        "answer": "do...while"
    },
    {
        "question": "By default, C Functions are what type of functions?",
        "options": [
            "global",
            "static",
            "library",
            "system"
        ],
        "answer": "static"
    },
    {
        "question": "You have written a function that you want to include as a member of structure 'a'. How is such as structure member defined?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "A Stack data structure allows all data operations at one end only, making it what kind of an implementation?",
        "options": [
            "FIFO",
            "LIFO",
            "LILO",
            "LOLI"
        ],
        "answer": "LIFO"
    },
    {
        "question": "What does this program display?",
        "options": [
            "K",
            "M",
            "H",
            "G"
        ],
        "answer": "G"
    },
    {
        "question": "Describe the relationship between lvalue and rvalue.",
        "options": [
            "An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear only on the right-hand side.",
            "An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear on either the left-hand or right-hand side.",
            "An lvalue and an rvalue may appear on either the left-hand or right-hand side of an assignment.",
            "An lvalue may appear on the left-hand or right-hand side of an assignment; an rvalue may appear only on the right-hand side."
        ],
        "answer": "An lvalue may appear on the left-hand or right-hand side of an assignment; an rvalue may appear only on the right-hand side."
    },
    {
        "question": "Which operator is used to access the address of a variable?",
        "options": [
            "`%`",
            "`**`",
            "`*`",
            "`&`"
        ],
        "answer": "`&`"
    },
    {
        "question": "Which add function properly returns the updated value of the result?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "Consider the number of the Fibonacci series below 100: 0,1,1,2,3,5,8,13,21,34,55,89. Which piece of code outputs the sequence?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "Which is _not_ a storage class specifier?",
        "options": [
            "`intern`",
            "`extern`",
            "`register`",
            "`static`"
        ],
        "answer": "`intern`"
    },
    {
        "question": "Which line of code, after execution, results in `i` having the value of 1?",
        "options": [
            "`for(i=1; i<=1; i++);`",
            "`for(i=1; i=10; i++);`",
            "`for(i=1; i==10; i++);`",
            "`for(i=10; i>=1; i--);`"
        ],
        "answer": "`for(i=1; i==10; i++);`"
    },
    {
        "question": "What is the value of variable c at the end of this program?",
        "options": [
            "50",
            "5",
            "0",
            "500"
        ],
        "answer": "0"
    },
    {
        "question": "What is _not_ one of the basic data types in C",
        "options": [
            "long double",
            "unsigned char",
            "array",
            "float"
        ],
        "answer": "array"
    },
    {
        "question": "What is the member access operator for a structure?",
        "options": [
            ",",
            "[]",
            ".",
            ":"
        ],
        "answer": "."
    },
    {
        "question": "What standard data type provides the smallest storage size and can be used in computations?",
        "options": [
            "char",
            "float",
            "int",
            "short"
        ],
        "answer": "char"
    },
    {
        "question": "what does the ctype tolower() function do?",
        "options": [
            "It returns TRUE for lowercase letters of the alphabet.",
            "It ensures that text output uses only ASCII values (0 through 127).",
            "It returns FALSE for lowercase letters of the alphabet.",
            "It converts an uppercase letter of the alphabet to lowercase."
        ],
        "answer": "It converts an uppercase letter of the alphabet to lowercase."
    },
    {
        "question": "Void pointer _vptr_ is assigned the address of float variable _g_. What is a valid way to dereference _vptr_ to assign its pointed value to a float variable named _f_ later in the program?",
        "options": [
            "`f=(float *)vptr;`",
            "`f=*(float *)vptr;`",
            "`f=*(float)vptr;`",
            "`f=(float)*vptr;`"
        ],
        "answer": "`f=*(float *)vptr;`"
    },
    {
        "question": "The dynamic memory allocation functions are defined in which system header file?",
        "options": [
            "stdio.h",
            "stdlib.h",
            "limits.h",
            "stddef.h"
        ],
        "answer": "stdlib.h"
    },
    {
        "question": "A function is a set of **\\_**.",
        "options": [
            "declarations",
            "statements",
            "variables",
            "objects"
        ],
        "answer": "statements"
    },
    {
        "question": "How are static functions different from global functions?",
        "options": [
            "Static functions must be declared in advance of being defined.",
            "Static functions must be declared in a separate header file.",
            "Static functions always return the same value.",
            "Static functions can be accessed only in the file where they are declared."
        ],
        "answer": "Static functions can be accessed only in the file where they are declared."
    },
    {
        "question": "Which code example creates the string \"Hello Mars\" in storage buffer `hello`.",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "If you use the fopen() function with the \"a\" mode, what happens if the named file doesn't exist?",
        "options": [
            "The file is created and opened for reading.",
            "The file is created and opened for writing.",
            "The fopen() function returns a NULL indicating that the operation has failed.",
            "The file is created and opened for both writing and reading"
        ],
        "answer": "The file is created and opened for writing."
    },
    {
        "question": "What does this function return?",
        "options": [
            "compiler error",
            "the smaller value of the two passed parameters",
            "runtime error",
            "the greater value of the two passed parameters"
        ],
        "answer": "the greater value of the two passed parameters"
    },
    {
        "question": "Which option is a valid function name?",
        "options": [
            "draw_star()",
            "5times()",
            "upper-limit()",
            "auto()"
        ],
        "answer": "draw_star()"
    },
    {
        "question": "What is not a valid type definition of a structure that contains x and y coordinates as integers, and that can be used as shown for the variable named point?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "What is the output of the below program?",
        "options": [
            "3",
            "5",
            "3 or 5 depending on input",
            "Compile time error"
        ],
        "answer": "5"
    },
    {
        "question": "What do the functions malloc() and calloc() allocate?",
        "options": [
            "reallocated memory",
            "static memory",
            "dynamic memory",
            "fragmented memory"
        ],
        "answer": "dynamic memory"
    },
    {
        "question": "You need to determine if a string variable is a substring of another string. Which standard C library function do you use?",
        "options": [
            "substr(str1, str2);",
            "strstr(str1, str2);",
            "substring(str1, str2);",
            "strspn(str1, str2);"
        ],
        "answer": "strstr(str1, str2);"
    },
    {
        "question": "Find the output of the program.",
        "options": [
            "`a=L*2`",
            "`a=L`",
            "`Error`",
            "`a=L*4`"
        ],
        "answer": "`a=L*4`"
    },
    {
        "question": "Predict the output of the following code when the **integer** variables x is initialized to 10,y to 2, and z to 0.",
        "options": [
            "80",
            "170",
            "31.5",
            "6"
        ],
        "answer": "80"
    },
    {
        "question": "What will be the output of the following code snippet?",
        "options": [
            "5",
            "4",
            "2",
            "1"
        ],
        "answer": "5"
    },
    {
        "question": "What is the output of this program?",
        "options": [
            "100",
            "200",
            "5",
            "50"
        ],
        "answer": "50"
    },
    {
        "question": "What is /0 character?",
        "options": [
            "String",
            "NULL Character",
            "ZERO",
            "Variable"
        ],
        "answer": "NULL Character"
    },
    {
        "question": "What is the correct output for the following code?",
        "options": [
            "Before a=10 b=20 , After a=10 b=10",
            "Before a=10 b=10 , After a=20 b=10",
            "Before a=10 b=20 , After a=20 b=20",
            "Before a=10 b=20 , After a=20 b=10"
        ],
        "answer": "Before a=10 b=20 , After a=20 b=10"
    },
    {
        "question": "What is the Incorrect option that explains # pragma directive ?",
        "options": [
            "#pragma exit allows us to specify functions called upon program exit.",
            "This is a preprocessor directive that can be used to turn on or off certain features.",
            "#pragma startup doesn't allow us to specify functions called upon program startup.",
            "It is of two types #pragma startup, #pragma exit and pragma warn."
        ],
        "answer": "#pragma startup doesn't allow us to specify functions called upon program startup."
    },
    {
        "question": "What will be the output of the following code snippet?",
        "options": [
            "2",
            "4",
            "8",
            "10"
        ],
        "answer": "8"
    },
    {
        "question": "What will be the output of the following code snippet?",
        "options": [
            "19 82",
            "Compilation Error",
            "82 19",
            "None of these"
        ],
        "answer": "19 82"
    },
    {
        "question": "What is the output of the following code snippet?",
        "options": [
            "2",
            "15",
            "16",
            "18"
        ],
        "answer": "16"
    },
    {
        "question": "What does the following declaration mean?",
        "options": [
            "ptr is an array of pointers to 10 integers",
            "ptr is a pointer to an array of 10 integers",
            "ptr is an array of 10 integers",
            "ptr is a pointer to an array"
        ],
        "answer": "ptr is a pointer to an array of 10 integers"
    },
    {
        "question": "What will be the output of the following code snippet?",
        "options": [
            "10,20",
            "10,10",
            "20,20",
            "20,10"
        ],
        "answer": "10,20"
    },
    {
        "question": "Choose true or false. When a variable is created in C, a memory address is assigned to the variable.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "What does the following fragment of C-program print?",
        "options": [
            "GATE 2011",
            "E2011",
            "2011",
            "01"
        ],
        "answer": "2011"
    },
    {
        "question": "What is the output of the following code snippet?",
        "options": [
            "5 6 11",
            "6 7 12",
            "5 6 12",
            "6 6 12"
        ],
        "answer": "6 7 12"
    },
    {
        "question": "What will be the output of the following C program segment?",
        "options": [
            "No choice",
            "Choice A",
            "Choice A",
            "Program gives no output as it is erroneous"
        ],
        "answer": "Choice A"
    },
    {
        "question": "String variable str1 has the value of \"abc\", and string variable str2 has the value \"xyz\". What are the values of str1 and str2 after this statement is executed?",
        "options": [
            "str1: \"xyz\" ; str2: \"xyz\"",
            "str1: \"abc\" ; str2: \"xyz\"",
            "str1: \"xyz\" ; str2: \"abc\"",
            "str1: \"abc\" ; str2: \"abc\""
        ],
        "answer": "str1: \"xyz\" ; str2: \"xyz\""
    },
    {
        "question": "Which is not one of the basic data types in C?",
        "options": [
            "array",
            "float",
            "long double",
            "unsigned char"
        ],
        "answer": "array"
    },
    {
        "question": "You have written a function that you want to include as a member of structure a. How is such as structure member defined?",
        "options": [
            ":",
            ":",
            ":",
            ":"
        ],
        "answer": ":"
    },
    {
        "question": "You need to determine if a string variable is a substring of another string. Which standard C library function do you use?",
        "options": [
            "substr(str1, str2);",
            "strstr(str1, str2);",
            "substring(str1, str2);",
            "strspn(str1, str2);"
        ],
        "answer": "strstr(str1, str2);"
    },
    {
        "question": "How are static functions different from global functions?",
        "options": [
            "Static functions must be declared in advance of being defined.",
            "Static functions must be declared in a separate header file.",
            "Static functions always return the same value.",
            "Static functions can be accessed only in the file where they are declared."
        ],
        "answer": "Static functions can be accessed only in the file where they are declared."
    },
    {
        "question": "What does this program display?",
        "options": [
            "K",
            "M",
            "H",
            "G"
        ],
        "answer": "G"
    },
    {
        "question": "What is not a valid command with this declaration?",
        "options": [
            "`printf(\"%c\", string[1][2]);`",
            "`printf(\"%s\", string[1][2]);`",
            "`printf(\"%s\", string[1]);`",
            "`printf(string[1]);`"
        ],
        "answer": "`printf(\"%s\", string[1][2]);`",
        "explanation": null,
        "codeblock": null
    }
]