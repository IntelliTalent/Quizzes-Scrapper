[
    {
        "question": "What is the value of s?",
        "options": [
            "123456",
            "123",
            "123",
            "456",
            "This code contains an error."
        ],
        "answer": "123456"
    },
    {
        "question": "What's the value of i after these statements?",
        "options": [
            "nil",
            "0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)",
            "-1",
            "This code crashes."
        ],
        "answer": "0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)"
    },
    {
        "question": "What value is in str after this line in executed?",
        "options": [
            "This code contains an error",
            "test",
            "nil",
            "test more"
        ],
        "answer": "This code contains an error"
    },
    {
        "question": "What is the output of the code given below?",
        "options": [
            "2",
            "1,2,3",
            "1,2",
            "Nothing, since this code contains an error."
        ],
        "answer": "2"
    },
    {
        "question": "Property defaults include \\_?",
        "options": [
            "atomic/strong",
            "atomic/weak",
            "nonatomic/weak",
            "nonatomic/strong"
        ],
        "answer": "atomic/strong"
    },
    {
        "question": "What is the key difference between NSDictionary and NSMutableDictionary?",
        "options": [
            "NSMutableDictionary's values can change",
            "NSMutableDictionary has not initializers.",
            "NSDictionary can't be copied.",
            "NSDictionary's values can change."
        ],
        "answer": "NSMutableDictionary's values can change"
    },
    {
        "question": "What is foo?",
        "options": [
            "A function with a return type of float.",
            "This code contains an error.",
            "A variable declaration of type float.",
            "A property of type float."
        ],
        "answer": "A function with a return type of float."
    },
    {
        "question": "What can you glean from this line?",
        "options": [
            "NameHelper is a category of NSString.",
            "NameHelper is a subclass of NSString.",
            "NSString implements the NameHelper protocol.",
            "NSString has a helper class."
        ],
        "answer": "NameHelper is a category of NSString."
    },
    {
        "question": "What's wrong with this code?",
        "options": [
            "Nothing is wrong with this code.",
            "Declarations do not need semicolons.",
            "x=5 is an invalid float.",
            "Variables can't be declared and initialized in the same state."
        ],
        "answer": "Nothing is wrong with this code."
    },
    {
        "question": "How many times with this loop be executed?",
        "options": [
            "50",
            "99",
            "100",
            "This code contains an error."
        ],
        "answer": "50"
    },
    {
        "question": "What is this code an example of?",
        "options": [
            "Key-Value Observing",
            "Class Value Observing",
            "Key-Data Observing",
            "KeyPath Observing"
        ],
        "answer": "Key-Value Observing"
    },
    {
        "question": "What does ARC stand for?",
        "options": [
            "Automatic Reference Counting",
            "Automatic Retain Checking",
            "Async Retain Cycles",
            "Automatic Release Code"
        ],
        "answer": "Automatic Reference Counting"
    },
    {
        "question": "What is printed for this code?",
        "options": [
            "1",
            "2",
            "0",
            "This code contains an error."
        ],
        "answer": "1"
    },
    {
        "question": "What best describes class inheritance in Objective-C?",
        "options": [
            "single inheritance but multiple protocol implementation",
            "Objective-C doesn't support inheritance",
            "dual class inheritance",
            "unlimited class inheritance and protocol adherence"
        ],
        "answer": "single inheritance but multiple protocol implementation"
    },
    {
        "question": "How many keys does this NSDictionary have after this code is executed?",
        "options": [
            "2",
            "4",
            "5",
            "This code contains an error."
        ],
        "answer": "2"
    },
    {
        "question": "What is the error in this code?",
        "options": [
            "The key and value items are mixed",
            "Nothing is wrong with it",
            "You can't set the capacity of a dictionary",
            "NSMutableDictionary doesn't have a :setValue:forKey function."
        ],
        "answer": "Nothing is wrong with it"
    },
    {
        "question": "What is printed from this code?",
        "options": [
            "print",
            "This code is invalid",
            "Nothing is printed from this code.",
            "nil"
        ],
        "answer": "print"
    },
    {
        "question": "What is different about this function?",
        "options": [
            "It is static",
            "It is abstract.",
            "It is inline.",
            "This code contains an error."
        ],
        "answer": "It is static"
    },
    {
        "question": "Structs can have \\_?",
        "options": [
            "functions",
            "initializers",
            "fields",
            "all of these answers"
        ],
        "answer": "fields"
    },
    {
        "question": "What is wrong with this code?",
        "options": [
            "There is nothing wrong with this code.",
            "There is not read-only directive.",
            "MyClass doesn't implement NSObject.",
            "Properties are declared in the implementation."
        ],
        "answer": "There is nothing wrong with this code."
    },
    {
        "question": "What is an enums base type for the code below?",
        "options": [
            "There is no base type.",
            "NSObject",
            "int",
            "NSNumber"
        ],
        "answer": "There is no base type."
    },
    {
        "question": "If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?",
        "options": [
            "UserDefaults",
            "plist file",
            "CoreData",
            "TextFile"
        ],
        "answer": "UserDefaults"
    },
    {
        "question": "What are categories used for?",
        "options": [
            "to extend other classes",
            "to manage access control",
            "to coordinate objects",
            "to group classes"
        ],
        "answer": "to extend other classes"
    },
    {
        "question": "What is this Objective-C code checking?",
        "options": [
            "This code contains an error",
            "if keyPath is an instance of NSString",
            "if keyPath's baseclass is the same as NSString's baseclass",
            "if keyPath implements the same methods as NSString"
        ],
        "answer": "This code contains an error"
    },
    {
        "question": "What is this a declaration of?",
        "options": [
            "an Extension",
            "a Generic",
            "a block of code",
            "an abstract class"
        ],
        "answer": "a block of code"
    },
    {
        "question": "For observing changes to a property, which of these two statements cause the related method to be called and why?",
        "options": [
            "Statement 2, since it calls the auto-created setter on the property.",
            "Statement 1, since it uses the property directly.",
            "Statement 2, since it specifies the class instance to use.",
            "Statement 1, since it calls the auto-created setter on the property."
        ],
        "answer": "Statement 2, since it calls the auto-created setter on the property."
    },
    {
        "question": "What is wrong with this code?",
        "options": [
            "Ints and floats can't be multiplied.",
            "The parameter isn't declared correctly.",
            "x is not in the right scope.",
            "Nothing is wrong with this code."
        ],
        "answer": "Nothing is wrong with this code."
    },
    {
        "question": "What's the difference between an array and a set?",
        "options": [
            "Arrays are ordered, non-unique values.",
            "Arrays are stored sorted.",
            "Sets are ordered, unique values.",
            "Sets can contain nils."
        ],
        "answer": "Arrays are ordered, non-unique values."
    },
    {
        "question": "Dot notation can be used for \\_?",
        "options": [
            "nothing, as they're never used in Objective-C",
            "function calls only",
            "property getter/setter",
            "parameter delimiters"
        ],
        "answer": "property getter/setter"
    },
    {
        "question": "What is the value of newVals after this code is executed?",
        "options": [
            "2,3",
            "nil",
            "This code contains an error",
            "2,\"3\""
        ],
        "answer": "2,3"
    },
    {
        "question": "How would this function be called?",
        "options": [
            "self.foo(5, b:10);",
            "This code contains an error.",
            "[self foo:5:10:20];",
            "[self foo:5 b:10];"
        ],
        "answer": "[self foo:5 b:10];"
    },
    {
        "question": "What is the type of the error return value stored in json?",
        "options": [
            "NSString",
            "NSArray",
            "id",
            "NSDictionary"
        ],
        "answer": "id"
    },
    {
        "question": "What is significant about this function declaration?",
        "options": [
            "The parameter is passed by value and can not be changed",
            "\\*\\* is not allowed on a parameter",
            "The parameter may be nil",
            "The parameter is passed by reference and may be changed"
        ],
        "answer": "The parameter is passed by reference and may be changed"
    },
    {
        "question": "What is printed from this code execution?",
        "options": [
            "0",
            "1",
            "thing2",
            "This code does not print anything"
        ],
        "answer": "1"
    },
    {
        "question": "You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?",
        "options": [
            "non-atomic",
            "strong",
            "weak",
            "atomic"
        ],
        "answer": "atomic"
    },
    {
        "question": "What is wrong with this line of code?",
        "options": [
            "`temp` is a keyword.",
            "1==1 is invalid.",
            "1==1 evaluates to a Boolean.",
            "Nothing is wrong with it."
        ],
        "answer": "Nothing is wrong with it."
    },
    {
        "question": "What is special about the code within this block?",
        "options": [
            "It executes on the main queue.",
            "It is the last code to run before the app goes inactive.",
            "It executes on a background thread.",
            "It is queued to execute in the background."
        ],
        "answer": "It executes on the main queue."
    },
    {
        "question": "How many items are in set1 after this code executes?",
        "options": [
            "zero",
            "six",
            "one",
            "five"
        ],
        "answer": "five"
    },
    {
        "question": "What is wrong with this code?",
        "options": [
            "NSDictionary cannot be printed this way.",
            "The last key is missing a value.",
            "Dictionaries cannot have mixed types as values.",
            "d1 is assigned an NSArray of values."
        ],
        "answer": "The last key is missing a value."
    },
    {
        "question": "What is the initial value of the property `val`?",
        "options": [
            "8",
            "nil",
            "-1",
            "undefined"
        ],
        "answer": "undefined"
    },
    {
        "question": "Which thread should UI updates be processed on to avoid crashes and application lag?",
        "options": [
            "UI",
            "dispatch",
            "background",
            "main"
        ],
        "answer": "UI"
    },
    {
        "question": "What is the value of val after this code is executed?",
        "options": [
            "This code is invalid",
            "YES",
            "NO",
            "1"
        ],
        "answer": "NO"
    },
    {
        "question": "In this code, what does ThatOne refer to?",
        "options": [
            "the parent class of TestClass",
            "the name of the category being created for ThisOne",
            "a protocoL impLemented by ThisOne",
            "a helper file's name"
        ],
        "answer": "a protocoL impLemented by ThisOne"
    },
    {
        "question": "What is the value of result after this code is executed?",
        "options": [
            "\"\"",
            "\"es\"",
            "\"test\"",
            "none of these answers"
        ],
        "answer": "\"test\""
    },
    {
        "question": "When will self receive the notification based on this code?",
        "options": [
            "none of these answers",
            "class0bj will recieve the notification, not self.",
            "when class0bj is set to \"name\"",
            "when the name property in the class0bj instance changes"
        ],
        "answer": "when the name property in the class0bj instance changes"
    },
    {
        "question": "What is wrong with this code?",
        "options": [
            "String literal are not created with\\*.",
            "NSString doesn't have a boolValue function.",
            "\"true\" has no meaning.",
            "There is nothing wrong with this code."
        ],
        "answer": "NSString doesn't have a boolValue function."
    },
    {
        "question": "How many times does this loop execute?",
        "options": [
            "an infinite number of times",
            "This code is invalid.",
            "zero",
            "one"
        ],
        "answer": "zero"
    },
    {
        "question": "What will this code print?",
        "options": [
            "\"test\"",
            "Nothing, this code is invalid.",
            "4",
            "0"
        ],
        "answer": "4"
    },
    {
        "question": "What is the value of numVtoInt after this code is executed?",
        "options": [
            "6",
            "0",
            "6.7",
            "7"
        ],
        "answer": "7"
    },
    {
        "question": "What does this code print?",
        "options": [
            "1.2300",
            ".04",
            "This code is invalid",
            "1"
        ],
        "answer": "1.2300"
    },
    {
        "question": "What is the maximum possible value of r1 in this code?",
        "options": [
            "0",
            "9",
            "1",
            "10"
        ],
        "answer": "9",
        "explanation": null,
        "codeblock": null
    }
]