[
    {
        "question": "Calculations involving numbers are faster than those involving string.",
        "options": [
            "a) True",
            "b) False"
        ],
        "answer": "a",
        "explanation": "Numbers can be compared in a single operation while string comparisons involve several byte by byte or character by character comparisons. As the strings become longer, the performance gets poor."
    },
    {
        "question": "To convert an int to string, the function is _________________",
        "options": [
            "a) INET_ATON()",
            "b) INET_NTOA()",
            "c) INET_ITOS()",
            "d) INET_STOI()"
        ],
        "answer": "b",
        "explanation": "In MySQL, the function used to convert an integer to a string is INET_NTOA(). On the other hand, the function INET_ATON() converts a string to the corresponding integer value."
    },
    {
        "question": "To convert a string to an int, the function is _________________",
        "options": [
            "a) INET_ATON()",
            "b) INET_NTOA()",
            "c) INET_ITOS()",
            "d) INET_STOI()"
        ],
        "answer": "a",
        "explanation": "In MySQL, the function used to convert a string to an integer is INET_ATON(). On the other hand, the function INET_NTOA() converts a string to the corresponding integer value."
    },
    {
        "question": "To maintain performance of tables having variable length rows, which statement is used?",
        "options": [
            "a) MAINTAIN TABLE",
            "b) BALANCE TABLE",
            "c) ADJUST TABLE",
            "d) OPTIMIZE TABLE"
        ],
        "answer": "d",
        "explanation": "In the variable length rows, there is more fragmentation of the table on which many deletes or updates are performed. OPTIMIZE TABLE is run periodically to maintain performance."
    },
    {
        "question": "Which of these columns are faster?",
        "options": [],
        "answer": "c",
        "explanation": "The fixed length columns are faster and take more space. CHAR(n) columns take n characters per value because the values are padded with trailing spaces when stored in the table."
    },
    {
        "question": "Which of these take more space?",
        "options": [],
        "answer": "c",
        "explanation": "In MySQL, the fixed length columns are faster and take more space. CHAR(n) columns take n characters per value because the values are padded with trailing spaces when stored in the table."
    },
    {
        "question": "To minimize disk I/O, which of these should be chosen?",
        "options": [],
        "answer": "b",
        "explanation": "In MySQL, because CHAR on average takes more space than VARCHAR, VARCHAR is preferred to be used to minimize the amount of the storage and disk I/O needed to process the rows."
    },
    {
        "question": "Avoiding NULL in columns may make queries simpler.",
        "options": [
            "a) True",
            "b) False"
        ],
        "answer": "a",
        "explanation": "In MySQL, avoiding the NULL in columns may make the queries simpler, since it is not required to check for NULL as a special case. Simpler queries generally can be processed more quickly."
    },
    {
        "question": "Which of these can be used to generate hash values?",
        "options": [
            "a) MS5()",
            "b) MA5()",
            "c) MF5()",
            "d) MD5()"
        ],
        "answer": "d",
        "explanation": "The hash values can be generated by using the function: MD5(). SHA1() or CRC32() can also be used to do the same. Custom hash values can also be created using logic within the application."
    },
    {
        "question": "IP numbers can be represented as _________________",
        "options": [
            "a) both integers and a string",
            "b) a string  but not integers",
            "c) integers but not a string",
            "d) neither a string nor integers"
        ],
        "answer": "a",
        "explanation": "The IP addresses like 192.168.0.1 can be either stored as a string or a group of integers. Both of these forms would have their own benefits. For example, storing as a string would facilitate pattern matching."
    }
]