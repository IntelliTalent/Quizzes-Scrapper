[
    {
        "question": "Merge sort uses which of the following algorithm to implement sorting?",
        "options": [
            "a) backtracking",
            "b) greedy algorithm",
            "c) divide and conquer",
            "d) dynamic programming"
        ],
        "answer": "c",
        "explanation": "Merge sort uses the technique of divide and conquer in order to sort a given array. It divides the array into two halves and applies merge sort algorithm to each half individually after which the sorted versions of these halves are merged together."
    },
    {
        "question": "What is the average case time complexity of standard merge sort?",
        "options": [
            "a) O(n log n)",
            "b) O(n",
            "c) O(n",
            "d) O(n log n"
        ],
        "answer": "a",
        "explanation": "The recurrence relation for merge sort is given by T(n) = 2T(n/2) + n. This can be solved using master\u2019s theorem and is found equal to O(n log n)."
    },
    {
        "question": "What is the auxiliary space complexity of standard merge sort?",
        "options": [
            "a) O(1)",
            "b) O(log n)",
            "c) O(n)",
            "d) O(n log n)"
        ],
        "answer": "c",
        "explanation": "The merging of two sorted arrays requires an additional space of n due to which the auxiliary space requirement of merge sort is O(n). Thus merge sort is not an in place sorting algorithm."
    },
    {
        "question": "What is the auxiliary space complexity of bottom up merge sort?",
        "options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "answer": "b",
        "explanation": "The auxiliary space complexity of bottom up merge sort is same as standard merge sort as both uses the same algorithm for merging the sorted arrays which takes o(n) space. But bottom up merge sort does not need to maintain a call stack."
    },
    {
        "question": "What is the average time complexity of bottom up merge sort?",
        "options": [
            "a) O(n log n)",
            "b) O(n",
            "c) O(n",
            "d) O(n log n"
        ],
        "answer": "a",
        "explanation": "The merge function in the bottom up merge sort takes O(n) time which is placed inside the for loop. The loop runs for O(log n) time, thus the overall time complexity of the code becomes O(n log n)."
    },
    {
        "question": "Merge sort uses which of the following method to implement sorting?",
        "options": [
            "a) merging",
            "b) partitioning",
            "c) selection",
            "d) exchanging"
        ],
        "answer": "a",
        "explanation": "Merge sort implements sorting by merging the sorted versions of smaller parts of the array. Thus its method of sorting is called merging."
    },
    {
        "question": "Bottom up merge sort uses recursion.",
        "options": [
            "a) true",
            "b) false"
        ],
        "answer": "b",
        "explanation": "Bottom up merge sort uses the iterative method in order to implement sorting. It begins by merging a pair of adjacent array of size 1 each and then merge arrays of size 2 each in the next step and so on."
    },
    {
        "question": "Bottom up merge sort is a stable sort.",
        "options": [
            "a) true",
            "b) false"
        ],
        "answer": "a",
        "explanation": "Bottom up merge sort like standard merge sort is a stable sort. This implies that the relative position of equal valued elements in the input and sorted array remain same."
    },
    {
        "question": "Choose the correct statement about bottom up merge sort from the following?",
        "options": [
            "a) bottom up merge sort has greater time complexity than standard merge sort",
            "b) bottom up merge sort has lesser time complexity than standard merge sort",
            "c) bottom up merge sort saves auxiliary space required on call stack",
            "d) bottom up merge sort uses recursion."
        ],
        "answer": "c",
        "explanation": "Bottom up merge sort unlike standard merge sort uses an iterative algorithm for sorting. Thus, it saves auxiliary space required by the call stack."
    },
    {
        "question": "Choose the correct option from the following that represents bottom up merge sort function?",
        "options": [
            "a)"
        ],
        "answer": "a",
        "explanation": "Bottom up merge sort uses iterative method in order to implement sorting. It begins by merging a pair of adjacent array of size 1 each and then merge arrays of size 2 each in the next step and so on. The process of merging the sorted arrays is same as in standard merge sort."
    }
]