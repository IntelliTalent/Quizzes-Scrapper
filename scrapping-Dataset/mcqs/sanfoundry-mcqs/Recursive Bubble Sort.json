[
    {
        "question": "Which of the following is an advantage of recursive bubble sort over its iterative version?",
        "options": [
            "a) it has better time complexity",
            "b) it has better space complexity",
            "c) it is easy to implement",
            "d) it has no significant advantage"
        ],
        "answer": "d",
        "explanation": "Recursive bubble sort has no significant advantage over iterative bubble sort. It is just a different way to implement the same."
    },
    {
        "question": "Bubble sort is also known as ___________",
        "options": [
            "a) stupid sort",
            "b) ship sort",
            "c) sinking sort",
            "d) shell sort"
        ],
        "answer": "c",
        "explanation": "Bubble sort is also referred to as sinking sort. It continuously compares the value of adjacent elements as it traverses through an array and swaps the elements which are out of order."
    },
    {
        "question": "What will be the recurrence relation of the code of recursive bubble sort?",
        "options": [
            "a) T(n) = 2T(n/2) + n",
            "b) T(n) = 2T(n/2) + c",
            "c) T(n) = T(n-1) + n",
            "d) T(n) = T(n-1) + c"
        ],
        "answer": "c",
        "explanation": "The recurrence relation of the code of recursive bubble sort is T(n) = T(n-1) + n. It can be solved by the method of substitution and is found to be equal to n"
    },
    {
        "question": "Which of the following sorting algorithm is stable?",
        "options": [
            "a) Selection sort",
            "b) Quick sort",
            "c) Bubble sort",
            "d) Heap sort"
        ],
        "answer": "c",
        "explanation": "Out of the given options bubble sort is the only algorithm which is stable. It is because the elements with identical values appear in the same order in the output array as they were in the input array."
    },
    {
        "question": "Which of the following is a variation of bubble sort?",
        "options": [
            "a) selection sort",
            "b) odd even sort",
            "c) cocktail sort",
            "d) stupid sort"
        ],
        "answer": "b",
        "explanation": "Odd even sort is a variation of bubble sort. But unlike bubble sort, odd even sort traverses the array in two phases- odd phase and even phase."
    },
    {
        "question": "What is the average case time complexity of recursive bubble sort?",
        "options": [
            "a) O(n)",
            "b) O(n log n)",
            "c) O(n",
            "d) O(log n)"
        ],
        "answer": "c",
        "explanation": "The overall recurrence relation of recursive bubble sort is given by T(n) = T(n-1) + n. It is found to be equal to O(n"
    },
    {
        "question": "What is the best case time complexity of recursive bubble sort?",
        "options": [
            "a) O(n)",
            "b) O(n log n)",
            "c) O(n",
            "d) O(log n)"
        ],
        "answer": "a",
        "explanation": "The best case time complexity of recursive bubble sort is O(n). It occurs in the case when the input is already/almost sorted."
    },
    {
        "question": "What is the worst case time complexity of recursive bubble sort?",
        "options": [
            "a) O(n)",
            "b) O(n log n)",
            "c) O(n",
            "d) O(log n)"
        ],
        "answer": "c",
        "explanation": "The overall recurrence relation of recursive bubble sort is given by T(n) = T(n-1) + n. It is found to be equal to O(n"
    },
    {
        "question": "What are the number of swaps required to sort the array arr={1, 2, 4, 3, 7, 5, 6} using recursive bubble sort?",
        "options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3"
        ],
        "answer": "d",
        "explanation": "The first swap takes place between 4 and 3 then the second swap takes place between 7 and 5 and then finally 6 and 7 are swapped which sorts our array."
    },
    {
        "question": "What will be the base case for the code of recursive bubble sort?",
        "options": [
            "a)"
        ],
        "answer": "c",
        "explanation": "The most appropriate condition for the base case of recursive bubble sort is when n equal 1 then return. It is because we know that an array with only 1 element is always sorted."
    },
    {
        "question": "What is the auxiliary space complexity of recursive bubble sort?",
        "options": [
            "a) O(n)",
            "b) O(1)",
            "c) O(n log n)",
            "d) O(n"
        ],
        "answer": "b",
        "explanation": "The auxiliary space required by recursive bubble sort is O(1). So it qualifies as an in-place sorting algorithm."
    },
    {
        "question": "Bubble sort is an adaptive sorting algorithm.",
        "options": [
            "a) true",
            "b) false"
        ],
        "answer": "a",
        "explanation": "Bubble sort is an adaptive algorithm. It is because the time complexity of the algorithm improves when the input array is almost sorted."
    },
    {
        "question": "Which of the following sorting algorithm is in place?",
        "options": [
            "a) recursive bubble sort",
            "b) merge sort",
            "c) radix sort",
            "d) counting sort"
        ],
        "answer": "a",
        "explanation": "Out of the given options recursive bubble sort is the only algorithm which is in place. It is because the auxiliary space required by recursive bubble sort is O(1)."
    },
    {
        "question": "Choose the correct function for recursive bubble sort?",
        "options": [
            "a)"
        ],
        "answer": "a",
        "explanation": "The base case of the recursive bubble sort should be 1 when equal 1 then return. It is because we know that an array with only 1 element is always sorted. Also, we need to swap the adjacent elements which are out of order."
    }
]