[
    {
        "question": "Merge sort uses which of the following algorithm to implement sorting?",
        "options": [
            "a) backtracking",
            "b) greedy algorithm",
            "c) divide and conquer",
            "d) dynamic programming"
        ],
        "answer": "c",
        "explanation": "Merge sort uses the technique of divide and conquer in order to sort a given array. It divides the array into two halves and apply merge sort algorithm to each half individually after which the sorted versions of these halves are merged together."
    },
    {
        "question": "What is the average case time complexity of standard merge sort?",
        "options": [
            "a) O(n log n)",
            "b) O(n",
            "c) O(n",
            "d) O(n log n"
        ],
        "answer": "a",
        "explanation": "The recurrence relation for merge sort is given by T(n) = 2T(n/2) + n. This can be solved using master\u2019s theorem and is found equal to O(n log n)."
    },
    {
        "question": "What is the auxiliary space complexity of standard merge sort?",
        "options": [
            "a) O(1)",
            "b) O(log n)",
            "c) O(n)",
            "d) O(n log n)"
        ],
        "answer": "c",
        "explanation": "The merging of two sorted arrays requires an additional space of n due to which the auxiliary space requirement of merge sort is O(n). Thus merge sort is not an in place sorting algorithm."
    },
    {
        "question": "What is the space complexity of in place merge sort?",
        "options": [
            "a) O(1)",
            "b) O(n)",
            "c) O(log n)",
            "d) O(n log n)"
        ],
        "answer": "c",
        "explanation": "Space complexity of in place version of merge sort is O(log n) which is used for storing call stack formed due to recursion. Note that the algorithms with space complexity as O(log n) also qualifies as in place algorithms as the value of log n is close to 1."
    },
    {
        "question": "What is the average time complexity of in place merge sort when we use the following function for merging?",
        "options": [],
        "answer": "b",
        "explanation": "The merge function in the in place merge sort takes O(n"
    },
    {
        "question": "Merge sort uses which of the following method to implement sorting?",
        "options": [
            "a) merging",
            "b) partitioning",
            "c) selection",
            "d) exchanging"
        ],
        "answer": "a",
        "explanation": "Merge sort implements sorting by merging the sorted versions of smaller parts of the array. Thus its method of sorting is called merging."
    },
    {
        "question": "In place merge sort has same time complexity as standard merge sort.",
        "options": [
            "a) true",
            "b) false"
        ],
        "answer": "b",
        "explanation": "In place version of merge sort has a greater time complexity as compared to its standard version. It is because the merging in in-place merge sort takes place in O(n"
    },
    {
        "question": "In-place merge sort is a stable sort.",
        "options": [
            "a) true",
            "b) false"
        ],
        "answer": "a",
        "explanation": "In-place merge sort like standard merge sort is a stable sort. This implies that the relative position of equal valued elements in the input and sorted array remain same."
    },
    {
        "question": "Choose the incorrect statement about merge sort from the following?",
        "options": [
            "a) both standard merge sort and in-place merge sort are stable",
            "b) standard merge sort has greater time complexity than in-place merge sort",
            "c) standard merge sort has greater space complexity than in-place merge sort",
            "d) in place merge sort has O(log n) space complexity"
        ],
        "answer": "b",
        "explanation": "Time complexity of standard merge sort is O(n log n) and that of in-place merge sort is O(n"
    },
    {
        "question": "Choose the correct function from the following that implements merging in in-place merge sort.",
        "options": [
            "a)"
        ],
        "answer": "b",
        "explanation": "Merging in in-place merge sort takes place in the original array itself. We first compare the first elements of the two halves. If the first element of second half is greater then we just increment the pointer of the first element of first half. Otherwise we shift elements to the right."
    }
]