[
    {
        "question": "Why are generics used?",
        "options": [
            "a) Generics make code more fast",
            "b) Generics make code more optimised and readable",
            "c) Generics add stability to your code by making more of your bugs detectable at compile time",
            "d) Generics add stability to your code by making more of your bugs detectable at run time"
        ],
        "answer": "c",
        "explanation": "Generics add stability to your code by making more of your bugs detectable at compile time."
    },
    {
        "question": "Which of these type parameters is used for generic methods to return and accept any type of object?",
        "options": [
            "a) K",
            "b) N",
            "c) T",
            "d) V"
        ],
        "answer": "c",
        "explanation": "T is used for type, A type variable can be any non-primitive type you specify: any class type, any interface type, any array type, or even another type variable."
    },
    {
        "question": "Which of these is an correct way of defining generic method?",
        "options": [
            "a) name(T1, T2, \u2026, Tn) { /* \u2026 */ }",
            "b) public name { /* \u2026 */ }",
            "c) class name[T1, T2, \u2026, Tn] { /* \u2026 */ }",
            "d) name{T1, T2, \u2026, Tn} { /* \u2026 */ }"
        ],
        "answer": "b",
        "explanation": "The syntax for a generic method includes a type parameter, inside angle brackets, and appears before the method\u2019s return type. For static generic methods, the type parameter section must appear before the method\u2019s return type."
    },
    {
        "question": "What will be the output of the following C# code snippet?",
        "options": [],
        "answer": "b",
        "explanation": "None."
    }
]